name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '20.x', '22.x' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Fast tests
        run: node tools/test-fast.js

      - name: OpenAPI check
        run: node tools/check-openapi.js

      - name: Docs gate (PR only)
        if: github.event_name == 'pull_request'
        env:
          BASE_REF: origin/main
        run: node tools/check-docs-updated.js

      - name: Build web SDK (Node 20 only)
        if: matrix.node-version == '20.x'
        run: |
          npm run build:web-sdk
          npm run size:web-sdk
          node tools/check-web-sdk-size.js

  bench-threshold:
    runs-on: ubuntu-latest
    needs: build-test
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Benchmark
        env:
          API_RATE_LIMIT_MAX: '100000'
          API_RATE_LIMIT_WINDOW_MS: '1000'
        run: |
          node tools/benchmark.js | tee benchmark.log

      - name: Benchmark summary
        if: always()
        run: |
          echo "## Benchmark Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if grep -E "P99=" benchmark.log; then
            grep -E "P99=" benchmark.log >> $GITHUB_STEP_SUMMARY || true
          else
            echo "No benchmark summary lines found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment benchmark table on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let lines = [];
            try {
              const log = fs.readFileSync('benchmark.log','utf8');
              lines = log.split('\n').filter(l => l.startsWith('BENCH_METRICS '));
            } catch (e) {}
            let body = '## Benchmark Summary\n\n';
            if (lines.length) {
              body += '| Payload | P50 (ms) | P95 (ms) | P99 (ms) |\n|---|---:|---:|---:|\n';
              for (const l of lines) {
                const m = l.match(/^BENCH_METRICS\s+(\S+)\s+P50=(\S+)\s+P95=(\S+)\s+P99=(\S+)/);
                if (m) {
                  const [_, name, p50, p95, p99] = m;
                  body += `| ${name} | ${p50} | ${p95} | ${p99} |\n`;
                }
              }
            } else {
              body += 'No BENCH_METRICS lines found';
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

  a11y-check:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Serve web folder
        run: |
          npx --yes http-server web -p 8080 -s &
          sleep 2

      - name: Run axe-core a11y check (soft)
        run: |
          npx --yes @axe-core/cli http://localhost:8080/verify.html || true

      - name: Comment benchmark on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary;
            try {
              const log = fs.readFileSync('benchmark.log','utf8');
              const lines = log.split('\n').filter(l => l.includes('P99='));
              summary = lines.length ? lines.join('\n') : 'No P99 lines found';
            } catch (e) {
              summary = 'benchmark.log not found';
            }
            const body = `## Benchmark Summary\n\n${summary}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

