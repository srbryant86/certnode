# CertNode Production CI/CD Pipeline
# Comprehensive automation for testing, building, and deployment

name: Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*', 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: certnode/api

jobs:
  # Code Quality and Security Analysis
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            cli/package-lock.json
            sdk/node/package-lock.json

      - name: Install dependencies
        run: |
          cd api && npm ci
          cd ../cli && npm ci
          cd ../sdk/node && npm ci

      - name: Lint code
        run: |
          cd api && npm run lint
          cd ../cli && npm run lint
          cd ../sdk/node && npm run lint

      - name: Type check
        run: |
          cd api && npm run typecheck
          cd ../cli && npm run typecheck
          cd ../sdk/node && npm run typecheck

      - name: Security audit
        run: |
          cd api && npm audit --audit-level=high
          cd ../cli && npm audit --audit-level=high
          cd ../sdk/node && npm audit --audit-level=high

      - name: Check for vulnerable dependencies
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-gate

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: certnode
          POSTGRES_DB: certnode_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-suite: [unit, integration, e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        run: cd api && npm ci

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Setup test environment
        run: |
          cd api
          cp .env.example .env.test
          npm run db:migrate:test
          npm run db:seed:test

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          cd api
          npm run test:unit -- --coverage --ci --watchAll=false
        env:
          NODE_ENV: test
          POSTGRES_URL: postgresql://certnode:postgres@localhost:5432/certnode_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          cd api
          npm run test:integration -- --coverage --ci --watchAll=false
        env:
          NODE_ENV: test
          POSTGRES_URL: postgresql://certnode:postgres@localhost:5432/certnode_test
          REDIS_URL: redis://localhost:6379

      - name: Run E2E tests
        if: matrix.test-suite == 'e2e'
        run: |
          cd api
          npm run start:test &
          sleep 10
          npm run test:e2e
        env:
          NODE_ENV: test
          POSTGRES_URL: postgresql://certnode:postgres@localhost:5432/certnode_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: api/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Store test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            api/test-results/
            api/coverage/
            api/logs/

  # Performance and Load Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        run: cd api && npm ci

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run performance tests
        run: |
          cd api
          npm run test:performance
        env:
          PERFORMANCE_TEST_DURATION: 60
          PERFORMANCE_TEST_CONCURRENCY: 10

      - name: Run load tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: api/tests/load/load-test.js
        env:
          K6_PROMETHEUS_RW_SERVER_URL: ${{ secrets.K6_PROMETHEUS_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            api/performance-results/
            api/load-test-results/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a'

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

  # Build and Push Docker Images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: api/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Sign container image
        uses: sigstore/cosign-installer@v3
      - run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install certnode-staging ./helm/certnode \
            --namespace staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --set ingress.hosts[0].host=staging-api.certnode.io \
            --values helm/certnode/values-staging.yaml \
            --wait --timeout=10m

      - name: Run staging smoke tests
        run: |
          sleep 60  # Wait for deployment to stabilize
          curl -f https://staging-api.certnode.io/health || exit 1
          npm run test:smoke -- --env staging

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "Staging deployment completed with status: ${{ job.status }}"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install certnode-production ./helm/certnode \
            --namespace production \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --set ingress.hosts[0].host=api.certnode.io \
            --values helm/certnode/values-production.yaml \
            --wait --timeout=15m

      - name: Run production smoke tests
        run: |
          sleep 120  # Wait for deployment to stabilize
          curl -f https://api.certnode.io/health || exit 1
          npm run test:smoke -- --env production

      - name: Update deployment metrics
        run: |
          curl -X POST "${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/deployments" \
            --data-binary @- <<EOF
          deployment_timestamp $(date +%s)
          deployment_version{version="${{ github.ref_name }}"} 1
          EOF

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "🚀 Production deployment successful! Version: ${{ github.ref_name }}"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Clean up old container images
        run: |
          # Keep only the latest 10 images
          gh api repos/${{ github.repository }}/packages/container/api/versions \
            --jq '.[10:] | .[] | .id' | \
            xargs -I {} gh api --method DELETE repos/${{ github.repository }}/packages/container/api/versions/{}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}