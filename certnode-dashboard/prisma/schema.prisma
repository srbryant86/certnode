datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ReceiptType {
  TRANSACTION @map("transaction")
  CONTENT     @map("content")
  OPS         @map("ops")
}

enum VerificationStatus {
  PENDING   @map("pending")
  VERIFIED  @map("verified")
  FAILED    @map("failed")
}

enum EnterpriseTier {
  FREE        @map("free")
  STARTER     @map("starter")
  PRO         @map("pro")
  ENTERPRISE  @map("enterprise")
}

model Receipt {
  id                   String             @id @default(cuid())
  enterpriseId         String             @map("enterprise_id")
  transactionId        String             @map("transaction_id")
  transactionData      Json               @map("transaction_data")
  cryptographicProof   Json               @map("cryptographic_proof")
  verificationStatus   VerificationStatus @default(VERIFIED) @map("verification_status")

  // Type discriminator
  type                 ReceiptType        @default(TRANSACTION)

  // Content-specific fields
  contentHash          String?            @map("content_hash")
  contentType          String?            @map("content_type")
  contentMetadata      Json?              @map("content_metadata")
  contentProvenance    Json?              @map("content_provenance")
  contentAiScores      Json?              @map("content_ai_scores")

  // Operational trust fields (for future use)
  subtype              String?            // incident|build_release|report_hash|policy_change
  subject              String?            // URN/URL of attested object
  claims               Json?              // Type-specific claims payload
  version              String?            @default("1.0")

  // Standard fields
  currency             String?
  createdAt            DateTime           @default(now()) @map("created_at")

  // Relations
  enterprise           Enterprise?        @relation(fields: [enterpriseId], references: [id])
  apiKey               ApiKey?            @relation(fields: [apiKeyId], references: [id])
  apiKeyId             String?            @map("api_key_id")

  @@map("receipts")
  @@index([enterpriseId, type])
  @@index([contentHash])
  @@index([type, subtype])
  @@index([apiKeyId])
}

model Enterprise {
  id                   String             @id @default(cuid())
  name                 String
  tier                 EnterpriseTier     @default(FREE)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  receipts             Receipt[]
  apiKeys              ApiKey[]

  @@map("enterprises")
}

model ApiKey {
  id                   String             @id @default(cuid())
  name                 String
  key                  String             @unique
  enterpriseId         String             @map("enterprise_id")
  isActive             Boolean            @default(true) @map("is_active")
  createdAt            DateTime           @default(now()) @map("created_at")
  lastUsedAt           DateTime?          @map("last_used_at")

  // Relations
  enterprise           Enterprise         @relation(fields: [enterpriseId], references: [id])
  receipts             Receipt[]

  @@map("api_keys")
  @@index([enterpriseId])
}