datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ReceiptType {
  TRANSACTION @map("transaction")
  CONTENT     @map("content")
  OPS         @map("ops")
}

enum VerificationStatus {
  PENDING   @map("pending")
  VERIFIED  @map("verified")
  FAILED    @map("failed")
}

enum EnterpriseTier {
  FREE        @map("free")
  STARTER     @map("starter")
  PRO         @map("pro")
  ENTERPRISE  @map("enterprise")
}

enum UserRole {
  ADMIN       @map("admin")
  USER        @map("user")
}

enum KeyStatus {
  ACTIVE      @map("active")
  REVOKED     @map("revoked")
}

enum RelationType {
  CAUSES      @map("causes")
  EVIDENCES   @map("evidences")
  FULFILLS    @map("fulfills")
  INVALIDATES @map("invalidates")
  AMENDS      @map("amends")
}

model Receipt {
  id                   String             @id @default(cuid())
  enterpriseId         String             @map("enterprise_id")
  transactionId        String             @map("transaction_id")
  transactionData      Json               @map("transaction_data")
  cryptographicProof   Json               @map("cryptographic_proof")
  verificationStatus   VerificationStatus @default(VERIFIED) @map("verification_status")

  // Type discriminator
  type                 ReceiptType        @default(TRANSACTION)

  // Content-specific fields
  contentHash          String?            @map("content_hash")
  contentType          String?            @map("content_type")
  contentMetadata      Json?              @map("content_metadata")
  contentProvenance    Json?              @map("content_provenance")
  contentAiScores      Json?              @map("content_ai_scores")

  // Operational trust fields (for future use)
  subtype              String?            // incident|build_release|report_hash|policy_change
  subject              String?            // URN/URL of attested object
  claims               Json?              // Type-specific claims payload
  version              String?            @default("1.0")

  // Standard fields
  currency             String?
  createdAt            DateTime           @default(now()) @map("created_at")

  // Receipt Graph fields
  graphDepth           Int                @default(0) @map("graph_depth")
  graphHash            String?            @map("graph_hash")

  // Relations
  enterprise           Enterprise?        @relation(fields: [enterpriseId], references: [id])
  apiKey               ApiKey?            @relation(fields: [apiKeyId], references: [id])
  apiKeyId             String?            @map("api_key_id")

  // Graph relationships
  parentRelationships  ReceiptRelationship[] @relation("ParentReceipt")
  childRelationships   ReceiptRelationship[] @relation("ChildReceipt")

  @@map("receipts")
  @@index([enterpriseId, type])
  @@index([contentHash])
  @@index([type, subtype])
  @@index([apiKeyId])
  @@index([graphDepth])
}

model Enterprise {
  id                   String             @id @default(cuid())
  name                 String
  domain               String?
  tier                 EnterpriseTier     @default(FREE)
  billingTier          EnterpriseTier     @default(FREE) @map("billing_tier")
  settings             String             @default("{}")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  receipts             Receipt[]
  apiKeys              ApiKey[]
  users                User[]
  auditLogs            AuditLog[]

  @@map("enterprises")
}

model ApiKey {
  id                   String             @id @default(cuid())
  name                 String
  keyHash              String             @map("key_hash")
  keyPreview           String             @map("key_preview")
  enterpriseId         String             @map("enterprise_id")
  userId               String             @map("user_id")
  status               KeyStatus          @default(ACTIVE)
  rateLimit            Int                @default(1000) @map("rate_limit")
  rateLimitWindow      String             @default("1h") @map("rate_limit_window")
  permissions          String             @default("[]")
  ipRestrictions       String             @default("[]") @map("ip_restrictions")
  lastUsed             DateTime?          @map("last_used")
  expiresAt            DateTime?          @map("expires_at")
  createdAt            DateTime           @default(now()) @map("created_at")

  // Relations
  enterprise           Enterprise         @relation(fields: [enterpriseId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])
  receipts             Receipt[]

  @@map("api_keys")
  @@index([enterpriseId])
  @@index([userId])
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  name                 String
  role                 UserRole           @default(USER)
  enterpriseId         String             @map("enterprise_id")
  passwordHash         String             @map("password_hash")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  enterprise           Enterprise         @relation(fields: [enterpriseId], references: [id])
  apiKeys              ApiKey[]
  auditLogs            AuditLog[]

  @@map("users")
  @@index([enterpriseId])
}

model AuditLog {
  id                   String             @id @default(cuid())
  enterpriseId         String             @map("enterprise_id")
  userId               String             @map("user_id")
  action               String
  resourceType         String             @map("resource_type")
  resourceId           String             @map("resource_id")
  details              String             @default("{}")
  createdAt            DateTime           @default(now()) @map("created_at")

  // Relations
  enterprise           Enterprise         @relation(fields: [enterpriseId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@map("audit_logs")
  @@index([enterpriseId])
  @@index([userId])
  @@index([resourceType, resourceId])
}

model ValidationRecord {
  id                   String             @id @default(cuid())
  requestId            String             @map("request_id")
  endpoint             String
  enterpriseId         String?            @map("enterprise_id")
  results              Json
  processingTime       Int                @map("processing_time")
  success              Boolean
  criticalFailures     Int                @map("critical_failures")
  highFailures         Int                @map("high_failures")
  timestamp            DateTime           @default(now())

  @@map("validation_records")
  @@index([timestamp])
  @@index([enterpriseId])
  @@index([endpoint])
  @@index([success])
}

model ValidationAlert {
  id                   String             @id @default(cuid())
  type                 String
  severity             String
  message              String
  details              Json
  timestamp            DateTime           @default(now())
  acknowledged         Boolean            @default(false)
  acknowledgedBy       String?            @map("acknowledged_by")
  acknowledgedAt       DateTime?          @map("acknowledged_at")
  resolvedAt           DateTime?          @map("resolved_at")

  @@map("validation_alerts")
  @@index([timestamp])
  @@index([acknowledged])
  @@index([type])
  @@index([severity])
}

model ReceiptRelationship {
  id                   String             @id @default(cuid())
  parentReceiptId      String             @map("parent_receipt_id")
  childReceiptId       String             @map("child_receipt_id")
  relationType         RelationType       @map("relation_type")
  description          String?
  metadata             Json?
  createdBy            String?            @map("created_by")
  createdAt            DateTime           @default(now()) @map("created_at")

  // Relations
  parentReceipt        Receipt            @relation("ParentReceipt", fields: [parentReceiptId], references: [id], onDelete: Cascade)
  childReceipt         Receipt            @relation("ChildReceipt", fields: [childReceiptId], references: [id], onDelete: Cascade)

  @@map("receipt_relationships")
  @@index([parentReceiptId])
  @@index([childReceiptId])
  @@index([relationType])
  @@unique([parentReceiptId, childReceiptId])
}