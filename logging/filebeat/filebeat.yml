# Filebeat Configuration for CertNode

filebeat.inputs:
  # Application logs
  - type: log
    enabled: true
    paths:
      - /app/logs/*.log
      - /app/logs/**/*.log
    fields:
      service: certnode-api
      environment: production
    fields_under_root: true
    multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'
    multiline.negate: true
    multiline.match: after
    json.keys_under_root: true
    json.add_error_key: true
    processors:
      - add_host_metadata:
          when.not.contains.tags: forwarded

  # Container logs (Docker)
  - type: container
    enabled: true
    paths:
      - '/var/lib/docker/containers/*/*.log'
    processors:
      - add_docker_metadata:
          host: "unix:///var/run/docker.sock"
      - decode_json_fields:
          fields: ["message"]
          target: ""
          overwrite_keys: true

  # System logs
  - type: syslog
    enabled: true
    protocol.udp:
      host: "0.0.0.0:514"
    fields:
      service: system
      environment: production
    fields_under_root: true

  # Nginx access logs
  - type: log
    enabled: true
    paths:
      - /var/log/nginx/access.log
      - /var/log/nginx/error.log
    fields:
      service: nginx
      log_type: access
    fields_under_root: true

  # PostgreSQL logs
  - type: log
    enabled: true
    paths:
      - /var/log/postgresql/*.log
    fields:
      service: postgres
      environment: production
    fields_under_root: true
    multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'
    multiline.negate: true
    multiline.match: after

  # Redis logs
  - type: log
    enabled: true
    paths:
      - /var/log/redis/*.log
    fields:
      service: redis
      environment: production
    fields_under_root: true

# Processors
processors:
  # Add hostname
  - add_host_metadata:
      when.not.contains.tags: forwarded

  # Add Docker metadata
  - add_docker_metadata: ~

  # Add Kubernetes metadata
  - add_kubernetes_metadata:
      host: ${NODE_NAME}
      matchers:
        - logs_path:
            logs_path: "/var/log/containers/"

  # Drop empty lines
  - drop_event:
      when:
        equals:
          message: ""

  # Parse timestamp
  - timestamp:
      field: '@timestamp'
      layouts:
        - '2006-01-02T15:04:05.000Z'
        - '2006-01-02T15:04:05Z'
      test:
        - '2023-01-01T12:00:00.000Z'

  # Add correlation ID
  - script:
      lang: javascript
      source: >
        function process(event) {
          var message = event.Get("message");
          if (message && typeof message === "string") {
            var match = message.match(/req_([a-f0-9\-]+)/);
            if (match) {
              event.Put("correlation_id", match[1]);
            }
          }
        }

# Output to Logstash
output.logstash:
  hosts: ["${LOGSTASH_HOST:logstash:5044}"]
  loadbalance: true
  compression_level: 3
  worker: 2

# Alternative: Direct output to Elasticsearch
# output.elasticsearch:
#   hosts: ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
#   index: "filebeat-certnode-%{+yyyy.MM.dd}"
#   template.name: "filebeat-certnode"
#   template.pattern: "filebeat-certnode-*"

# Logging configuration
logging.level: info
logging.to_files: true
logging.files:
  path: /var/log/filebeat
  name: filebeat
  keepfiles: 7
  permissions: 0644

# Monitoring
monitoring:
  enabled: true
  elasticsearch:
    hosts: ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
    index: "filebeat-monitoring"

# HTTP endpoint for health checks
http.enabled: true
http.host: 0.0.0.0
http.port: 5066

# Setup configuration
setup.template.enabled: false
setup.ilm.enabled: false

# Additional configurations
name: "certnode-filebeat"
tags: ["certnode", "production"]

# Performance tuning
queue.mem:
  events: 4096
  flush.min_events: 512
  flush.timeout: 5s

# Security
ssl.verification_mode: certificate