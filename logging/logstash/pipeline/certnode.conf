# Logstash Pipeline Configuration for CertNode
input {
  # Beats input for log collection
  beats {
    port => 5044
  }

  # TCP input for application logs
  tcp {
    port => 5000
    codec => json_lines
  }

  # UDP input for metrics and trace data
  udp {
    port => 5001
    codec => json_lines
  }

  # HTTP input for webhook-based logging
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse timestamp if present
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  # Add environment metadata
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:production}"
      "service" => "certnode"
    }
  }

  # Parse CertNode specific logs
  if [service] == "certnode-api" {
    # Parse structured JSON logs
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
      }
    }

    # Extract request ID from logs
    if [message] =~ /req_[a-f0-9\-]+/ {
      grok {
        match => { "message" => "req_(?<request_id>[a-f0-9\-]+)" }
      }
    }

    # Parse HTTP access logs
    if [message] =~ /HTTP/ {
      grok {
        match => {
          "message" => "%{COMBINEDAPACHELOG} %{GREEDYDATA:extra_fields}"
        }
      }

      # Convert response time to number
      if [response_time] {
        mutate {
          convert => { "response_time" => "float" }
        }
      }
    }

    # Parse error logs
    if [level] == "error" or [severity] == "error" {
      mutate {
        add_tag => [ "error", "alert" ]
      }

      # Extract stack trace
      if [error] and [error][stack] {
        mutate {
          add_field => { "stack_trace" => "%{[error][stack]}" }
        }
      }
    }

    # Parse security events
    if [event_type] == "security" {
      mutate {
        add_tag => [ "security", "audit" ]
      }

      # Enhance security logs with geolocation
      if [client_ip] {
        geoip {
          source => "client_ip"
          target => "geoip"
        }
      }
    }

    # Parse performance metrics
    if [event_type] == "performance" {
      mutate {
        add_tag => [ "performance", "metrics" ]
      }

      # Convert numeric fields
      if [duration] {
        mutate {
          convert => { "duration" => "float" }
        }
      }

      if [memory_usage] {
        mutate {
          convert => { "memory_usage" => "integer" }
        }
      }
    }
  }

  # Parse database logs
  if [service] == "postgres" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{POSINT:pid}\] %{WORD:severity}: %{GREEDYDATA:db_message}"
      }
    }

    # Tag slow queries
    if [db_message] =~ /duration: [0-9]+\.[0-9]+ ms/ {
      grok {
        match => { "db_message" => "duration: %{NUMBER:query_duration}" }
      }

      mutate {
        convert => { "query_duration" => "float" }
      }

      if [query_duration] and [query_duration] > 1000 {
        mutate {
          add_tag => [ "slow_query" ]
        }
      }
    }
  }

  # Parse Redis logs
  if [service] == "redis" {
    grok {
      match => {
        "message" => "%{POSINT:pid}:%{CHAR:role} %{REDISTIMESTAMP:timestamp} %{REDISLEVEL:level} %{GREEDYDATA:redis_message}"
      }
    }
  }

  # Add correlation ID for request tracing
  if ![correlation_id] and [request_id] {
    mutate {
      add_field => { "correlation_id" => "%{request_id}" }
    }
  }

  # Remove sensitive data
  mutate {
    remove_field => [ "password", "secret", "token", "api_key" ]
  }

  # Set document ID for deduplication
  if [request_id] and [timestamp] {
    mutate {
      add_field => { "[@metadata][document_id]" => "%{request_id}_%{timestamp}" }
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
    index => "certnode-logs-%{+YYYY.MM.dd}"
    document_id => "%{[@metadata][document_id]}"
    template_name => "certnode-logs"
    template => "/usr/share/logstash/templates/certnode-template.json"
    template_overwrite => true
  }

  # Output critical errors to separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
      index => "certnode-errors-%{+YYYY.MM.dd}"
    }
  }

  # Output security events to separate index
  if "security" in [tags] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
      index => "certnode-security-%{+YYYY.MM.dd}"
    }
  }

  # Output performance metrics
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
      index => "certnode-metrics-%{+YYYY.MM.dd}"
    }
  }

  # Debug output (disable in production)
  if "${LOG_DEBUG:false}" == "true" {
    stdout {
      codec => rubydebug
    }
  }
}